/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   authorization-dialog.html
 */

/// <reference path="../polymer/types/polymer-element.d.ts" />
/// <reference path="../polymer/types/lib/legacy/class.d.ts" />
/// <reference path="../paper-button/paper-button.d.ts" />
/// <reference path="../paper-styles/shadow.d.ts" />
/// <reference path="../paper-dialog-behavior/paper-dialog-behavior.d.ts" />
/// <reference path="../neon-animation/neon-animation-runner-behavior.d.ts" />
/// <reference path="../neon-animation/animations/slide-from-top-animation.d.ts" />
/// <reference path="../neon-animation/animations/slide-up-animation.d.ts" />
/// <reference path="../neon-animation/animations/fade-out-animation.d.ts" />
/// <reference path="../neon-animation/animations/fade-in-animation.d.ts" />

declare namespace UiElements {

  /**
   * Base authorization dialog for Advanced REST Client. It is to be used to
   * create authorization dialogs with common UI and animations.
   *
   * The dialog extends `Polymer.PaperDialogBehavior` so the hosting application
   * should listen for it's events to determine dialog's state.
   *
   * ### Example
   *
   * ```html
   * <authorization-dialog>
   *  <h2 slot="title">Basic authorization</h2>
   *  <form>
   *   <input type="text" name="login"/>
   *  </form>
   * </authorization-dialog>
   * ```
   *
   * ### Styling
   *
   * `<authorization-dialog>` provides the following custom properties and mixins for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--authorization-dialog` | Mixin applied to the element | `{}`
   * `--authorization-dialog-title` | Mixin applied to the title of the dialog | `{}`
   *
   * Also it implements all `paper-dialog` mixins and variables.
   */
  class AuthorizationDialog extends
    Polymer.PaperDialogBehavior(
    Polymer.NeonAnimationRunnerBehavior(
    Polymer.Element)) {
    animationConfig: any;

    /**
     * Set to true to disable canceling the overlay by clicking outside it.
     */
    noCancelOnOutsideClick: boolean|null|undefined;
    connectedCallback(): void;
    disconnectedCallback(): void;
    _renderOpened(): void;
    _renderClosed(): void;
    _onNeonAnimationFinish(): void;
  }
}

interface HTMLElementTagNameMap {
  "authorization-dialog": UiElements.AuthorizationDialog;
}
